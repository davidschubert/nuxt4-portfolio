# Nginx-Konfiguration für pukalani.studio
# Optimiert für maximale Performance und minimale Latenz
# 
# Installation:
# 1. sudo cp nginx.conf.example /etc/nginx/sites-available/pukalani.studio
# 2. sudo ln -sf /etc/nginx/sites-available/pukalani.studio /etc/nginx/sites-enabled/
# 3. sudo nginx -t
# 4. sudo systemctl reload nginx

# Upstream für Node.js/PM2
upstream nuxt_backend {
    server 127.0.0.1:3000 fail_timeout=5s max_fails=3;
    keepalive 64;
}

# HTTP → HTTPS Redirect
server {
    listen 80;
    listen [::]:80;
    server_name pukalani.studio www.pukalani.studio;
    
    # ACME Challenge für Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/letsencrypt;
    }
    
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS Server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name pukalani.studio www.pukalani.studio;
    
    # SSL Zertifikate (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/pukalani.studio/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/pukalani.studio/privkey.pem;
    
    # SSL Optimierungen
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Root-Verzeichnis für statische Dateien
    root /var/www/pukalani/.output/public;
    
    # Security Headers (zusätzlich zu Nuxt)
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # ===================================
    # GZIP KOMPRESSION
    # ===================================
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/xml+rss
        application/rss+xml
        application/atom+xml
        image/svg+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject;
    gzip_min_length 256;
    gzip_disable "msie6";
    
    # ===================================
    # BROTLI KOMPRESSION (falls installiert)
    # ===================================
    # Installieren mit: sudo apt install nginx-module-brotli
    # Dann in /etc/nginx/nginx.conf einfügen:
    # load_module modules/ngx_http_brotli_filter_module.so;
    # load_module modules/ngx_http_brotli_static_module.so;
    
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types
    #     text/plain
    #     text/css
    #     text/xml
    #     text/javascript
    #     application/javascript
    #     application/x-javascript
    #     application/json
    #     application/xml
    #     application/xml+rss
    #     application/rss+xml
    #     application/atom+xml
    #     image/svg+xml
    #     font/truetype
    #     font/opentype
    #     application/vnd.ms-fontobject;
    # brotli_static on;
    
    # ===================================
    # STATISCHE ASSETS - DIREKT VON NGINX
    # ===================================
    
    # Nuxt Build Assets (_nuxt/*)
    # Versioniert mit Hash → immutable caching
    location /_nuxt/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff" always;
        access_log off;
        try_files $uri =404;
    }
    
    # Optimierte Bilder (_ipx/*)
    location /_ipx/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff" always;
        access_log off;
        try_files $uri @nuxt;
    }
    
    # Statische Bilder (images/*)
    location /images/ {
        expires 1y;
        add_header Cache-Control "public, max-age=31536000, immutable";
        add_header X-Content-Type-Options "nosniff" always;
        access_log off;
        try_files $uri =404;
    }
    
    # Favicon und Icons
    location ~ ^/(favicon\.ico|icon\.svg|icon-.*\.svg|apple-touch-icon\.svg)$ {
        expires 1y;
        add_header Cache-Control "public, max-age=31536000, immutable";
        access_log off;
        try_files $uri =404;
    }
    
    # robots.txt, sitemap.xml
    location ~ ^/(robots\.txt|sitemap\.xml|sitemap-.*\.xml)$ {
        expires 1d;
        add_header Cache-Control "public, max-age=86400";
        access_log off;
        try_files $uri @nuxt;
    }
    
    # site.webmanifest
    location = /site.webmanifest {
        expires 1w;
        add_header Cache-Control "public, max-age=604800";
        add_header Content-Type "application/manifest+json";
        try_files $uri =404;
    }
    
    # ===================================
    # HTML SEITEN - DURCH NUXT (mit Revalidation)
    # ===================================
    location / {
        # HTML sollte revalidiert werden für Updates
        add_header Cache-Control "public, max-age=0, must-revalidate";
        try_files $uri $uri/index.html @nuxt;
    }
    
    # ===================================
    # PROXY ZU NODE.JS/PM2
    # ===================================
    location @nuxt {
        proxy_pass http://nuxt_backend;
        
        # Proxy Headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffer Settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Keep-Alive
        proxy_set_header Connection "";
        
        # Cache Bypass für dynamische Inhalte
        proxy_cache_bypass $http_upgrade;
    }
    
    # ===================================
    # ERROR PAGES
    # ===================================
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # ===================================
    # PERFORMANCE TUNING
    # ===================================
    
    # Client Body Buffer
    client_body_buffer_size 128k;
    client_max_body_size 10M;
    
    # Sendfile optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    
    # Keep-Alive
    keepalive_timeout 65;
    keepalive_requests 100;
    
    # Hide Nginx version
    server_tokens off;
}

# ===================================
# WICHTIGE HINWEISE
# ===================================
#
# 1. Pfad anpassen:
#    - Ersetze "/var/www/pukalani" mit deinem tatsächlichen Pfad
#
# 2. SSL-Zertifikate:
#    - Stelle sicher, dass Let's Encrypt konfiguriert ist
#    - Erneuere automatisch mit: certbot renew
#
# 3. Brotli (optional):
#    - Bessere Kompression als Gzip
#    - Installation: sudo apt install nginx-module-brotli
#    - Aktiviere die auskommentieren Zeilen oben
#
# 4. Performance-Test:
#    curl -I https://pukalani.studio/chatgpt
#    # Erwartung: X-Content-Encoding: gzip, Response < 200ms
#
# 5. Logs:
#    - Access Log: /var/log/nginx/access.log
#    - Error Log: /var/log/nginx/error.log
#
# 6. Reload nach Änderungen:
#    sudo nginx -t && sudo systemctl reload nginx

